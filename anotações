	<!-- HTML é case insensitive-->

	<!--tag meta contém metadados - informações para o site, que não irão aparecer para o usuári->
	
<!-- Semântica no HTML: 
	- Usar tags corretas nos locais corretos, para que todos que leiam o site consigam entender corretamente a mensagem (até mesmo deficientes visuais)

		<b> x <strong>. 
		- <b>: deixa texto em negrito. 
		- <strong>: é uma tag semântica, serve para dar ênfase num elemento muito importante (ajuda nos leitores de texto), mas também deixa o texto em negrito.
		
		<i> x <em>:
		- <i>: deixa texto em itálico
		- <em>: utilizada para dar ênfase (ajuda nos leitores de texto), mas deixa os textos em itálico

		<del> x <s>:
		- <del>: semântica
		- <s>: tag física

	- Usar headings corretamente: necessário usá-los
		de acordo com a hierarquia entre eles.
		- São utilizados por buscadores do google e leitores de tela (para usuários com visual impairments). Há headings de H1-H6
		- Os headings de maior hierarquia não precisam ser maiores que os demais, só devem estar corretos considerando a hierarquia de títulos e subtítulos      -->

	<!-- Tags em bloco e inline:
		- Tags em bloco:  como H
			Apresentadas em bloco para o usuário. 
			Blocos contém: conteúdo, padding (espaço que envolve o conteúdo), borda (margens do padding) e margem (margens mais externas)
			Quando é adicionado um novo parágrado para elementos em bloco, ocorre a quebra de linha (e fica um espaçamento entre os dois parágrafos, pois o elemento contém espaçamentos invisíveis ao seu redor).
		- Tags inline: como o p
			Apresentadas em linha, e não podem conter tags em bloco aninhadas.

		Com o CSS é possível personalizar os componentes de um elemento em bloco
		É possível alterar o display de um elemento para ser um display em bloco (como foi feito para o elemento img no style.css)-->

	<!--Aninhamento de tags: algumas tags podem conter outras. 
		- Não  se pode aninhar elementos em bloco dentro de  elementos inline. Porém, podemos colocar elementos inline dentro de tags em bloco (como blockquote).
		- Em <p> não se pode colocar tags em bloco, pois o texto deve ser fluido (in line).
		- Várias tags podem ser aninhadas em p:
			O texto html vem cru. Para tornar partes maiores, menores, negrito, itálico... utilizamos tags.
			<sub> <sup> <small> <br> <q> <q> etc
		OBS.: <blockquote>  é um elemento em bloco, que não pode vir dentro de <p>. Em <p> usaríamos o <q>, com  o atributo cite="". 
	-->

	<!--Toda tag html pode receber uma tag style, que recebe um CSS-->
	<!-- rel: atributo que estabelece qual é a relação entre o  arquivo/URL linkado e o documento atual. Pode ser usado em <a>, <link>-->

	<!-- Tags de container genéricos: não fazem nada e não tem significado semântico. Servem apenas para estilização.
		- Span: container genérico inline
		- Div: container genérico em bloco-->

	<!-- Tags HTML de separação de conteúdos
		- Header: para cabeçalhos
		- Main: parte do texto que envolve o conteúdo principal

	-->

	<!-- Elementos de estrutura normalmente são do tipo box, e quebram linha-->
	<!-- O seletor * seleciona todos os elementos da página
	- Pading e margin: topo -> direita -> baixo -> esquerda (sentido horário)

        -->


Box model: a maioria dos elementos html são representados por boxes retangulares
	- Essas caixas contém (de fora para dentro): 
	- margem: distância entre os limites da página e o conteúdo e sua borda. É transparente.
		- Serve para empurrar um elemento de outro
		- Se aumentar a margem, o conteúdo ficará mais distante do margin edge (limite da margem)
		- A margem entre dois elementos não se somam (elas se sobrepõem). Caso as margens sejam do mesmo tamanho, elas se mantém iguais. Caso sejam diferentes, a distância entre os
		dois elementos será igual à margem maior.

		- margin: cima, direita, baixo, esquerda (larguras)


		- border: linha que demarca o fim do padding e início da margem.
			OBS.: aumentar a largura da borda não diminui o padding. Elas não se sobrepõem.
			- border: largura, style, color.
			- box-sizing: border-box; (borda e margem passam a ficar dentro do limite do box. Se eu definir o width de 10px, e border de 5px, o total do box será de 10px, somando tudo)
				
		- padding: espaço ao redor do contéudo, enchimento da caixa
			- Distância interna do conteúdo para a borda. 
			- Aumentar o padding: faz com que haja uma maior distância entre o conteúdo e a borda do elemento.
				
			- padding: cima, direita, baixo, esquerda (larguras)
				
		- conteúdo
			- É possível definir a altura e largura da área de conteúdo.
				- Caso não sejam definidas, por padrão, o bloco irá ocupar toda a largura da tela, e sua altura será de acordo com o tamanho do conteúdo.

		- Elementos com display em block seguem o box model:
			- Todos os elementos para separação de conteúdo têm display block
			- Irão quebrar linha
			- Se não for definida largura: ocupam toda a largura da tela

			- Transformar um elemento com display inline em block:
				- CSS display: block
			


		- Colocar imagem de fundo:
			- background-image: url ()
			- background-size: cover ()
				- Faz com que a imagem se ajuste dentro da caixa
			- background-position: center (pode ser outros alinhamentos)
				- Alinha o centro da imagem no centro da caixa, considerando altura e largura
		
		- Listas:
			- ul e ol: recebem list itens (li)
				- ul: unordered list
				- ol: ordered list
				- type: tipo de enumeração (1, A, I, start)

			- dl: description list (recebe descrição de um termo).
				- dt: termo
				- dd: descrição

			- <a>: <a> dentro de qualquer elemento: ele deve ser estilizado no CSS, não adianta estilizar o pai, pois o <a> já possui um estilo padrão, que se sobressai.
				OBS.: para ser definidas margem e padding, é necessário alterar o display para block

			- Propriedades que podem ser alteradas:
				background-color: ;
				margin: 0px;
				padding: 0px;
				list-style: none;
					- São as bolinhas/números...
				text-align: ;
				height: ;
				gap: 0.2rem;

				- Lista na horizontal:
				display: flex (itens ficam lado a lado, sem espaçamento entre eles)
					- flex-direction: row (é o padrão, mas podemos usar column, column-reverse...)
				justify-content: na horizontal
				align-items: na vertical
				width:
				OBS.: o display padrão da lista é grid (elementos em coluna, quebrando linha).
		
		- Tabelas:
				- Elemento table
				- É composta por:
					 <table> 
						<thead> (Vai abrigar os títulos das linhas e colunas)
							<tr> 
								<th> Título de uma coluna
						
					<tbody> (Vai abrigar o conteúdo da tabela)
						<tr>
							<td> Conteúdo do corpo
							- Deve-se colocar a mesma quantidade de td que de th (salvo quando se quer que um conteúdo seja disposto para +1 coluna)
			
					<tfoot> (Vai abrigar o rodapé da tabela - por exemplo o total de uma conta)
						<tr>
							<td>
	
				- Colocar o conteúdo de uma linha para mais de uma coluna:
					- Usar o atributo colspan ="" para definir o número de coluna que uma linha deverá ocupar.
			
	
				- Tabelas em telas pequenas:
					- Podem não caber na tela de um celular. Para resolver, podemos colocar a tabela numa div, setar max-dith 100% e colocar overflow auto (que vai criar um scroll na própria div)

			 
		- Formulários:
			- Muito importantes, pois coletam dados do usuário que serão enviados para o backend e retornaraão uma resposta.
			- Deve-se estrturar os formulários de forma semântica (pois isso ajuda pessoas com dificuldades visuais).
			- Ocupa a largura toda da tela por padrão (display block, margin-top:0)
			
			- Estrutura: <form action="" method="" target="" autocomplete="">
				- Atributos:
					- action: descreve para o navegador para onde que o formulário será enviado
					- method: método do formulário. get é o padrão (campos do formulário são atrelados à URL com padrõa de URL). post também é comum.
					- target: define onde um documento linkado será aberto
						_blank	Opens the linked document in a new window or tab
						_self	Opens the linked document in the same frame as it was clicked (this is default)** PADRÃO
						_parent	Opens the linked document in the parent frame
						_top	Opens the linked document in the full body of the window
						framename
					- autocomplete: esse atributo não é usado normalmente, mas pode ser para setar "off".
				
				- TAGS:
					- Input:
						- Atributo name: informa o nome do input - serve para identificar o tipo de dado fornecido pelo usuário para o servidor, para o backend.
						- Atributo value: todo input terá um value, que é o valor fornecido pelo usuário. 
							- O atributo value não é necessário para todos os tipos de input. 
							- Ele pode servir para substituir o placeholder, indicando o tipo de dado a ser fornecido para o input.
							- É usado em inputs que não são do type text ou number, porque nesse caso não seria inserido um value pelo usuário.
							- disabled e readonly podem ser utilizados

						- Required: atributo que define que é necessário o preenchimento do input para que o formulário possa ser enviado.
					
						- Inputs do type checkbox e radio:
							- Caso se deseje que o usuário selecione uma dentre duas ou mais opções, deve-se colocar o mesmo valor para o atributo "name" de todos os inputs desejados.
					
							- Checked:
								- Atributo usado em checkbox e radio que define que uma das opções já virá marcada.
						
						
					- Label:
						- Pode envolver o input, ou pode ser colocado como irmão do input, mas aí deve-se usar o atributo "for" e referenciar o ID do input que o label irá se relacionar.

					- Button:
						- Normalmente type= "reset" ou "submit". Existem também outros tipos de botão

					- Fieldset:
						- Agrupa campos relacionados do formulário. Ex.: campos de endereço, contato, etc.
					
						- Legend: legenda que identifica o fieldset

					- H1-h6;
					- P;
					- Section;

			
				OBS.: não se pode aninhar formulários em outros formulários

					- Select: cria um menu de opções que o usuário pode selecionar.
						- Option: tag para criar as opções
						- Optgroup: tag para criar diferentes grupos de opções dentro do select
						
				
			- Separando o CSS:
				- Pode ser feito em arquivo separado, utilizando a tag style ou utilizando o atributo style.
				- Prezar por utilizar classes como seletores CSS. Usar ID somente quando for preciso estilizar especificamente 1 elemento.
				- Caso vá ser utilizado mais de um arquivo de CSS:
					- O último link de CSS referenciado é a que é aplicada no navegador.

				OBS.: é melhor ter apenas um arquivo de CSS, pois do contrário perde-se desempenho.


				- Seletores básicos CSS: 
				- Seletor de descendentes: 
					- Pode ser selecionada um elemento específico que pertence a determinada classe: 
						- Ex.: h1.menu-login,
						apenas o elemento h1 da aclasse "menu-login" será selecionado. 
						HTML: 
						<body> 
							<div class="menu"> 
								<h1 class="menu-login">Faça login!</h1> 
									<p class="menu-login"> Não é cadastrado?Cadastre-se agora!</p>
							</div>
						</body>
				
						- Nesse caso,apenas o elemento h1 da aclasse "menu-login" será selecionado. 
						
					- Herança de estilos em DIVs: 
						- A configuração padrão do navegador determina que div's filhas herdam a cor da div pai. 
						- color: inherit; 
						- Isso pode ser alterado no CSS, basta definir o estilo color: initial; 
						
					- Os filhos herdam .menus.menu-login, concomitantemente, "menus" e "menu-login" .menus .menu-login,	e não todos. 
					
					Ex.: 
					HTML: 
					<div class="lista-1"> 
						<div class="item"> ITEM 1
							 <div class="explicacao">Explicacao</div>
						 </div> 
						<div class="item"> ITEM 2 
							<div class="explicacao">Explicacao</div> 
						</div> 
				
						
					CSS: 
					div { 
						color: initial; 
					} 
					
					.lista-1 > .item {
						 color: red; 
						} 
					
					- Nesse caso, apenas os elementos de classe "item" ficarão vermelhos. 
					
					- Seletores de irmãos: 
						- Adjacent sibling combinator: .introdução h1+p, e aí todos os atributos do HTML serão selecionados. 
						[src=".test-site/images/imagem.png"],
							o estilo só será aplicado caso o valor seja aquele em específico. 
							
							- Interessante quando se utiliza js para manipular a página. [meu-atributo~="valor1"], no caso de o atributo ter vários valores possíveis. HTML <h1 meu-atributo="valor1 valor2 valor3"> [meu-atributo|="valor1"], caso o link ainda não tenha sido aberto. 
					
					- seletor:visited, caso o link já tenha sido aberto. 
					
					- seletor:active, exceto algum outro, que pode ser referenciado pela classe, ID ou tag. 
					Ex.: input:hover:not(.inputName) { background-color: red; seletor:nth-child(even / odd / 5 / 3n / 3n+5) - Seleciona um ou vários elementos irmãos específicos. - Even: par - Odd: ímpar - índice específico: selecionar pelo numeral do índice do irmão. - 3n/4n: seleciona de 3 em 3/4 em 4 - 3n+5: seleciona de 3 em 3 a partir do 5º elemento - Pseudoelementos: permite a estilização de uma parte específica de um elemnto. - seletor::before - Pseudoelemento irá aparecer dentro do elemento selecionado,
					antes do seu conteúdo. 
				
					- seletor::after 
						- Pseudoelemento irá aparecer dentro do elemento selecionado, depois do seu conteúdo. 
				
					- seletor::first-line - seletor::first-letter 
					- seletor::placeholder 
				
				- Especificidade no CSS: - ID, classes, atributos e pseudo-classes,	elementos e pseudo-elementos 
					
					- Sempre a regra com a maior especificidade é aplicada,	indepentemente da ordem em que foi escrita no css. 
					- Para regras de mesma especificidade,	será aplicada a que foi escrita por último. 
					- Quantos mais seletores forem sendo adicionados,	maior a especificidade,	no geral. 
					
					- Tem que ser verificado o resultado, para ver qual regra será aplicada. 
					
					- Atributo style é a que regra que tem maior especificidade (utilizada no próprio html). 
					
					- !important: se for escrita na frente da regra do css,	ela será aplicada, independentemente da especificidade. 
						OBS.: pode ser definida regra para seletor que tenha #ID & .classe ao mesmo tempo. Nesse caso,a especificidade é maior que apenas o ID. 
						Ex.: 
						html ... 
						<section class="introdução"> 
							<h1 class="introdução" id="titulo"> Como começa: </h1>
								</section> 
								
						CSS: 
						#titulo { 
							background-color: red;
						} 
						
						#titulo.introdução {
							 background-color: blue; 
							} 
						
						- Nesse caso, o background blue será aplicado, pois a especificidade é (1,1,0) -> 110 
						
				- Herança de propriedades: 
					- Algumas propriedades são passadas de pai para filho. 
					- Color, font-family,font-size,	font-style... há uma lista das principais propriedades herdadas. 
					
					- Para desativar a herança e configurações padrões do navegador: definir a propriedade com o valor "initial". 
					
					Ex.: font-size: initial 
					
				- Propriedades box-model: 
				
					- Elementos com display block podem ter altura e largura definidas,	enquanto que elementos com display inline, não pegam altura e largura. 
					Ex.: tag <p> tem o display padrão inline, enquanto <div> tem display block. 
					- Width 
					- Max-width 
					- Min-width 
					- Height 
					- Max-height 
					- Min-width 
					
					- Overflow: propriedade que define o que acontecerá quando o content exceder a altura ou largura da box em que está contido. 
					
					- Box-sizing: border-box 
						- O tamanho do box irá incluir seu conteúdo, com altura, largura, altura e largura do padding e da borda. 
						
						- Margem não é incluída,sempre fica fora. 
						
					- Float: pode ser definida uma forma de organização horizontal para os boxes 
					
						OBS.: Margens e paddings de elementos em block (elementos de separação de conteúdo, por padrão), não são somadas, exceto se estiverem em float. 
						
						
				- Cores HTML: (color picker) 
					- Hexadecimal: ABCDEF12345678 (3 ou 6 letras - se os pares forem repetidos, pode ser colocada apenas 1 letra para cada par) 
						- 1º par de letras= vermelho 
						- 2º par de letras= verde 
						- 3º par de letras= azul 
					
					- RGB: 3 centenas - Red, green e blue 
				
					- RGBA: 4 valores (r, g, b, opacidade) 
					
					- HSL e HSLA 
				
				- Unidades de medida: 
					- Unidades absolutas: px 
						- Não tem como o usuário alterar o tamanho da fonte utilizando as configurações do navegador, por exemplo. 
						
					- Unidades relativas: dependem de outra medida 
						- É interessante utilizar porque permite que o usuário altere o tamanho da visualização da página, e todos os elementos em medidas relativas,se ajustam. 
						
						- em (0-10) : elemento se comporta com base nas medidas do elemento PAI (mais próximo) - 1em = 100% do tamanho do pai - 0.5em = 50% do tamanho do pai 
						
						- rem: elemento se comporta com base no elemento root do documento (html) 
							- É mais utilizado atualmente 
							
							- Como utilizar rem para equivaler a um valor específico de pixels: 
								- Definir font-size do html: 62.5% (o navegador já define por padrão o font-size em 16px, caso o font-size do html seja 100%) . 
								- 62,5% de 16px, equivale a 10px. Então,o font-size do html passa a ser de 10px,e medidas seguintes de 1rem também. 
								
						- vw: 1% da largura do viewport - área visível do navegador, em uma tela (0-100) 
							- O viewport muda de acordo com o tamanho da janela. - vh: 1% da altura do viewport 
							- Bastante utilizado. 
							- Ex.: landing-page, em que cada sessão corresponde a 100vh, pegando a tela inteira. 
							OBS.: links âncoras direcionam para ID's do website. 
							
						- porcentagem: comprimento e largura em relação ao elemento pai 
						
						- vmin: 1% relativa à menor dimensão do viewport 
							- Varia conforme o redimensionamento da janela 
							
						- vmax: 1% relativa à maior dimensão do viewport 
							- Varia conforme o redimensionamento da janela 
							
				- Propriedades para textos: 
					- font-size 
					- font-style 
					- font-weight: 300,	400 (normal), 700 (bold), ou bold 
				
					- direction: ltr (left to right) ; rtl (right to left) 
					- letter-spacing - word-spacing - line-height 
					- text-align: alinhamento do texto (center, right, left) 
					- text-decoration: overline, underline,	line-through 
					- text-indent 
					- text-shadow: esquerda-direita, cima-baixo, blur(esfumaçado), cor 
						Ex.: text-shadow: 1rem 1rem 1rem red; 
							- Sombra da direta para a esquerda ou de baixo para cima: usar valores negativos para as medidas de dispersão. 
							
					- text-transform: lowercase, uppercase, capitalize (primeira letra maiúscula) 
					
					
				- Posicionamento dos elementos: 
					- Para alterar manualmente a posição dos elementos: 
					
					- position: static; (padrão) - não é possível setar top, left, bottom e right,e os elementos não se sobrepõem. 
					- position: absolute 
						- O elemento ficará posicionado no ponto definido independentemente de outros, podendo se sobrepor.
						- Outros elementos não irão mudar de posição por conta desse elemento absolute. 
						- Os elementos ignoram a posição do elemento com position absolute. 
						- Muda o flow da página. 
						
						- Posicionando o elemento: as distâncias são definidas de acordo com o tamanho do viewport,	ignorando outros elementos. 
							- top, right, left,	bottom - em pixels,	rem, porcentagem
						
						- Centralizar elementos: 
								- Dá para usar margin-top, left, right,	bottom negativos 
							
						- z-index: - ou + 
						
					- position: relative; 
						- Permite que seja definido top, left, right e bottom para um elemento (as distâncias deles em cada uma dessas direções) .
						- Permite a sobreposição de elementos, mas outros elementos ainda "respeitam" o espaço do elemento relative. 
						
						- Posicionamento o elemento: 
							- As distâncias são definidas de acordo com a posição dos outros elementos próximos. 
							
							- Colocar um elemento com position absolute dentro de outro com position relative: 
								- Ele irá se posicionar dentro do elemento com position relative, e não de acordo com o viewport. 
								
					- position: fixed; 
						- Mesmas características do position absolute, podendo ser definido top, bottom, left,	right. 
					
						- Diferença do absolute: o elemento sempre irá ocupar a posição especificada, mesmo com a rolagem da página. 
					
						- Usado em botões de voltar ao topo, ou botões de contato por whatsapp, por exemplo. 
					
					- position: sticky; 
						- Usado para elementos com overflow. 
						- O elemento com position sticky vai ficar aparecendo na rolagem da página, até que passe para o próximo elemento sticky. 
						
						
				- Media queries e breakpoints: 
					- Media-queries: estrutura do CSS que permite aplicar determinados estilos de acordo com condições setadas. - Permite que sejam sobrescritos estilos no CSS. 
					- Pode ser usada para definir como um conteúdo será apresentado, a depender do tamanho da tela do usuário. - São definidos breakpoints a partir dos quais a regra do CSS a ser seguida vai mudar. 
					
					- Como definir: 
					@media (max-width: 320px) { 
						.formulario { width: 500px; } 
					} 
					
					- Podem também ser usados operadores lógicos: not, and, only, e também pode ser usado o "or". Ex.: @media (min-width: 321px) and (max-width: 768px) { } - Mobile-first ou desktop-first: - Geralmente os sites são feitos para mobile, no CSS, sendo utilizadas as media-queries para que possa ser acessado via desktop. */
				
				
				
				