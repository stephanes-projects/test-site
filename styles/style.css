* {
	margin: 0;
	padding: 0;
	box-sizing: border-box;
}

html {
	font-size: 62.5%;
	scroll-behavior: smooth;
	height: 100%;
	display: flex;
	/* width: 100%; */
	overflow-x: hidden;
	overflow-y: scroll;
}

body {
	font-family: "Open Sans", serif;
	font-size: 100%;
	line-height: 100%;
	background-color: white;
	margin: 0;
	height: 100%;
	display: flex;
	flex-direction: column;
	align-items: right;
	width: 100vw;
}

.conteúdo-página {
	/* box-sizing: content-box; */
	padding: 0rem 5rem;
	/* margin-bottom: 40px; */
	min-height: 100vh;
	width: 100vw;
}

.logo {
	width: 7vw;
	background-color: #f00;
	height: 10vh;
}

#imagem-logo {
	height: 10vh;
	width: 7vw;
	padding: 0;
	margin: 0;
}

header {
	width: 100vw;
	gap: 5rem;
	background-color: black;
	margin: 0;
}

.topnav {
	display: flex;
	align-items: center;
	justify-content: space-around;
	width: 100%;
	cursor: pointer;
	font-size: 2rem;
	list-style: none;
}

.topnav a:hover {
	color: #bd5734;
	/* background-color: rgba(0, 0, 0, 0.2); */
}

.menu-button {
	display: flex;
	justify-content: right;
	align-items: center;
	padding-right: 0px;
}

#login-button {
	border-radius: 0.6rem;
	background-color: white;
	font-family: "Open Sans", serif;
	font-weight: bold;
	height: 40px;
	width: 7vw;
	color: #bd5734;
}

#login-button:hover {
	border: 2px solid #bd5734;
	cursor: pointer;
}

.botoes-menu-sup {
	display: flex;
	text-decoration: none;
	color: white;
	font-size: 2.5rem;
	font-weight: bold;
}

.banner {
	display: flex;
	justify-content: center;
	align-items: center;
	margin-top: 50px;

	width: 100vw;
}

.banner h1 {
	position: absolute;
	color: #7a3b2e;
	font-weight: bold;
	font-size: 5.5rem;
	font-family: "Franklin Gothic Medium", "Arial Narrow", Arial, sans-serif;
	text-shadow: 0.5rem 0.2rem 0.1rem black;
}

.banner img {
	opacity: 0.5;
	width: 70vw;
}

h1,
h2 {
	line-height: 100%;
}

h1 {
	margin: 0;
	padding: 10px 0;
	font-family: "Open Sans", serif;
	color: #7a3b2e;
	font-weight: bold;
	font-size: 2.5rem;
	text-align: left;
}

h1:hover:not(form h1, .banner h1) {
	text-decoration: underline solid #bd5734;
	cursor: pointer;
}

#aplicação-tema {
	margin: 40px 0px 40px 0;
}

.lista {
	list-style: inside;
	color: black;
	padding: 10px 0px 10px 30px;
}

.lista a {
	text-decoration: none;
	color: black;
}

.lista a:hover {
	text-decoration: underline solid #bd5734;
}

#OLOP {
	margin: 40px 0px 40px 0;
}

#MLAT {
	margin: 40px 0px 40px 0;
}

#MLP {
	margin: 40px 0px 40px 0;
}

p,
li {
	font-size: 20px;
	line-height: 2;
	letter-spacing: 1px;
	text-align: justify;
	margin: 5px 0px 5px 0;
}

/* p + p,
header + p {
	text-indent: 1.5rem;
} */

.citação {
	text-align: left;
	margin-left: 0px;
}

#mapa-endereço {
	/* margin: 0 auto; */
	display: flex;
	justify-content: center;
	margin: 0 auto;
	width: 60vw;
}

iframe {
	border-radius: 1rem;
}

.table {
	border-collapse: collapse; /* Junta as bordas da tabela*/
	font-family: sans-serif;
	width: 40vw;
	height: 40vh;
	padding: 0;
	margin: 50px auto;
}

thead td,
tbody td,
table th {
	border: 0.1rem solid #7a3b2e;
	padding: 5px;
	text-align: center;
	font-size: 1.5rem;
	height: 5vh;
}

table caption {
	caption-side: bottom;
	font-size: 1rem;
	text-align: left;
	font-style: italic;
	margin: 10px 0;
}

tfoot td,
table th {
	background-color: #a79e84;
	font-weight: bold;
	text-align: center;
	font-size: 1.5rem;
}

tfoot {
	font-style: italic;
	height: 5vh;
}

footer {
	width: 100vw;
	margin: 0;
}

#footer {
	background-color: black;
	list-style: none;
	padding: 1rem;
	display: flex;
	justify-content: right;
	flex-direction: column;
	width: 100%;
}
#footer li a {
	font-size: 1.5rem;
	text-decoration: none;
	color: white;
	font-weight: bold;
	cursor: pointer;
	text-align: right;
}

#footer li a:hover {
	color: #bd5734;
	background-color: rgba(0, 0, 0, 0.2);
}

#titulo-form {
	display: flex;
	background-color: #bd5634c4;
	border: 2px solid #bd5734;
	height: 150px;
	margin: 0 auto;
	align-items: center;
	justify-content: center;
}

form h1 {
	font-size: 2rem;
	color: white;
	text-decoration: none;
	font-weight: bold;
}

form p {
	line-height: 30px;
	font-size: 20px;
	margin: 0;
}

label {
	cursor: pointer;
	display: block;
	margin: 10px 0px;
	font-weight: bold;
	width: 40vw;
	font-size: 18px;
	line-height: 2rem;

	/* border: 1px solid black; */
}

input,
select,
textarea {
	display: block;
	margin: 0.5rem 0px;
	border: 0.05rem solid black;
	transition: all 300ms ease-in-out;
	max-width: 40vw;
}

input:focus:not(.IELTS-input),
select:focus,
textarea:focus {
	/* border: 2px solid blue; por que não aplica? */
	background-color: rgb(194, 194, 194);
	outline: none;
	border: 0.005rem solid blue;
}

.div-botoes-finais {
	display: flex;
	gap: 5px;
}

.botao-final {
	border: 0.1rem solid #bd5734;
	border-radius: 15%;
	padding: 0.5rem;
}

.botao-final:hover {
	background-color: rgba(0, 0, 0, 0.2);
}

.formulario {
	background-color: #a79e846c;
	width: 50vw;
	margin: 5rem auto;
	padding: 2rem;
	border: 0.2rem solid #bd5734;
}

.IELTS {
	display: flex;
	margin: 0;
	width: 10vw;
	gap: 0rem;
}

.IELTS-input {
	border-radius: 50%;
	background-color: white;
	appearance: none;
	width: 1.5rem;
	height: 15px;
}

.IELTS-input:checked {
	border-radius: 50%;
	border: 3px solid blue;
	/* background-color: white; */
}

/* .IELTS-input:focus {
	background-color: white;
	border: 3px solid blue;
} */

/* .espelho-ielts1:not(.IELTS-input-sim:checked) {
	background-color: black;
} */

.menu-login,
.menu-registre-se {
	display: flex;
	height: 10vh;
	padding-left: 2rem;
	background-color: black;
	width: 100vw;
}

.login,
.registre-se {
	background-color: rgba(0, 0, 0, 0.2);
	width: 50vw;
	margin: 0 auto;
}

.titulo-login,
.titulo-registre-se {
	font-size: 4rem;
	text-align: center;
	font-weight: bold;
	padding-top: 2rem;
}

.link:link {
	color: blue;
}

.link:visited {
	color: purple;
}

.item::after {
	content: " - ";
}

a:hover:not(.link, .link-footer, .botoes-menu-sup)::after {
	content: " * ";
	color: #f00;
}

#footer li a:hover::before {
	content: " -> ";
}

.introdução p::first-letter {
	font-size: 5rem;
	color: #bd5734;
	font-weight: bold;
}

p:not(:first-child) {
	text-indent: 3rem;
}

@media (max-width: 568px) {
	.topnav {
		display: flex;
		flex-direction: column;
		justify-content: right;
	}
}

/* - Seletores básicos CSS: - Seletor de descendentes: - Pode ser selecionada um elemento específico que pertence a determinada classe: - Ex.: h1.menu-login,
	apenas o elemento h1 da aclasse "menu-login" será selecionado. HTML: <body> <div class="menu"> <h1 class="menu-login">Faça login!</h1> <p class="menu-login">Não é cadastrado?Cadastre-se agora!</p> </div> - Nesse caso,
	apenas o elemento h1 da aclasse "menu-login" será selecionado. - Herança de estilos em DIVs: - A configuração padrão do navegador determina que div's filhas herdam a cor da div pai. - color: inherit; - Isso pode ser alterado no CSS,
	basta definir o estilo color: initial; - Os filhos herdam .menus.menu-login,
	concomitantement,
	"menus" e "menu-login" .menus .menu-login,
	e não todos. Ex.: HTML: <div class="lista-1"> <div class="item"> ITEM 1 <div class="explicacao">Explicacao</div> </div> <div class="item"> ITEM 2 <div class="explicacao">Explicacao</div> </div> </div> CSS: div { color: initial; } .lista-1 > .item { color: red; } - Nesse caso,
	apenas os elementos de classe "item" ficarão vermelhos. - Seletores de irmãos: - Adjacent sibling combinator: .introdução h1+p,
	e aí todos os atributos do HTML serão selecionados. [src=".test-site/images/imagem.png"],
	o estilo só será aplicado caso o valor seja aquele em específico. - Interessante quando se utiliza js para manipular a página. [meu-atributo~="valor1"],
	no caso de o atributo ter vários valores possíveis. HTML <h1 meu-atributo="valor1 valor2 valor3"> [meu-atributo|="valor1"],
	caso o link ainda não tenha sido aberto. seletor:visited,
	caso o link já tenha sido aberto. seletor:active,
	exceto algum outro,
	que pode ser referenciado pela classe,
	ID ou tag. Ex.: input:hover:not(.inputName) { background-color: red; seletor:nth-child(even / odd / 5 / 3n / 3n+5) - Seleciona um ou vários elementos irmãos específicos. - Even: par - Odd: ímpar - índice específico: selecionar pelo numeral do índice do irmão. - 3n/4n: seleciona de 3 em 3/4 em 4 - 3n+5: seleciona de 3 em 3 a partir do 5º elemento - Pseudoelementos: permite a estilização de uma parte específica de um elemnto. - seletor::before - Pseudoelemento irá aparecer dentro do elemento selecionado,
	antes do seu conteúdo. - seletor::after - Pseudoelemento irá aparecer dentro do elemento selecionado,
	depois do seu conteúdo. - seletor::first-line - seletor::first-letter - seletor::placeholder - Especificidade no CSS: - ID,
	classes,
	atributos e pseudo-classes,
	elementos e pseudo-elementos - Sempre a regra com a maior especificidade é aplicada,
	indepentemente da ordem em que foi escrita no css. - Para regras de mesma especificidade,
	será aplicada a que foi escrita por último. - Quantos mais seletores forem sendo adicionados,
	maior a especificidade,
	no geral. - Tem que ser verificado o resultado,
	para ver qual regra será aplicada. - Atributo style é a que regra que tem maior especificidade (utilizada no próprio html) . - !important: se for escrita na frente da regra do css,
	ela será aplicada,
	independentemente da especificidade. OBS.: pode ser definida regra para seletor que tenha #ID & .classe ao mesmo tempo. Nesse caso,
	a especificidade é maior que apenas o ID. Ex.: html ... <section class="introdução"> <h1 class="introdução" id="titulo"> Como começa: </h1> </section> #titulo { background-color: red; } #titulo.introdução { background-color: blue; } - Nesse caso,
	o background blue será aplicado,
	pois a especificidade é (1,1,0) -> 110 - Herança de propriedades: - Algumas propriedades são passadas de pai para filho. - Color,
	font-family,
	font-size,
	font-style... há uma lista das principais propriedades herdadas. - Para desativar a herança e configurações padrões do navegador: definir a propriedade com o valor "initial". Ex.: font-size: initial - Propriedades box-model: - Elementos com display block podem ter altura e largura definidas,
	enquanto que elementos com display inline,
	não pegam altura e largura. Ex.: tag <p> tem o display padrão inline,
	enquanto <div> tem display block. - Width - Max-width - Min-width - Height - Max-height - Min-width - Overflow: propriedade que define o que acontecerá quando o content exceder a altura ou largura da box em que está contido. - Box-sizing: border-box - O tamanho do box irá incluir seu conteúdo,
	com altura,
	largura,
	altura e largura do padding e da borda. - Margem não é incluída,
	sempre fica fora. - Float: pode ser definida uma forma de organização horizontal para os boxes OBS.: Margens e paddings de elementos em block (elementos de separação de conteúdo, por padrão),
	não são somadas,
	exceto se estiverem em float. - Cores HTML: (color picker) - Hexadecimal: ABCDEF12345678 (3 ou 6 letras - se os pares forem repetidos, pode ser colocada apenas 1 letra para cada par) - 1º par de letras= vermelho - 2º par de letras= verde - 3º par de letras= azul - RGB: 3 centenas - Red,
	green e blue - RGBA: 4 valores (r, g, b, opacidade) - HSL e HSLA - Unidades de medida: - Unidades absolutas: px - Não tem como o usuário alterar o tamanho da fonte utilizando as configurações do navegador,
	por exemplo. - Unidades relativas: dependem de outra medida - É interessante utilizar porque permite que o usuário altere o tamanho da visualização da página,
	e todos os elementos em medidas relativas,
	se ajustam. - em (0-10) : elemento se comporta com base nas medidas do elemento PAI (mais próximo) - 1em = 100% do tamanho do pai - 0.5em = 50% do tamanho do pai - rem: elemento se comporta com base no elemento root do documento (html) - É mais utilizado atualmente - Como utilizar rem para equivaler a um valor específico de pixels: - Definir font-size do html: 62.5% (o navegador já define por padrão o font-size em 16px, caso o font-size do html seja 100%) . - 62,
	5% de 16px,
	equivale a 10px. Então,
	o font-size do html passa a ser de 10px,
	e medidas seguintes de 1rem também. - vw: 1% da largura do viewport - área visível do navegador,
	em uma tela (0-100) - O viewport muda de acordo com o tamanho da janela. - vh: 1% da altura do viewport - Bastante utilizado. - Ex.: landing-page,
	em que cada sessão corresponde a 100vh,
	pegando a tela inteira. OBS.: links âncoras direcionam para ID's do website. - porcentagem: comprimento e largura em relação ao elemento pai - vmin: 1% relativa à menor dimensão do viewport - Varia conforme o redimensionamento da janela - vmax: 1% relativa à maior dimensão do viewport - Varia conforme o redimensionamento da janela - Propriedades para textos: - font-size - font-style - font-weight: 300,
	400 (normal),
	700 (bold),
	ou bold - direction: ltr (left to right) ; rtl (right to left) - letter-spacing - word-spacing - line-height - text-align: alinhamento do texto (center, right, left) - text-decoration: overline,
	underline,
	line-through - text-indent - text-shadow: esquerda-direita,
	cima-baixo,
	blur(esfumaçado),
	cor Ex.: text-shadow: 1rem 1rem 1rem red; - Sombra da direta para a esquerda ou de baixo para cima: usar valores negativos para as medidas de dispersão. - text-transform: lowercase,
	uppercase,
	capitalize (primeira letra maiúscula) - Posicionamento dos elementos: - Para alterar manualmente a posição dos elementos: - position: static; (padrão) - não é possível setar top,
	left,
	bottom e right,
	e os elementos não se sobrepõem. - position: absolute - O elemento ficará posicionado no ponto definido independentemente de outros,
	podendo se sobrepor. - Outros elementos não irão mudar de posição por conta desse elemento absolute. - Os elementos ignoram a posição do elemento com position absolute. - Muda o flow da página. - - Posicionando o elemento: as distâncias são definidas de acordo com o tamanho do viewport,
	ignorando outros elementos. - top,
	right,
	left,
	bottom - em pixels,
	rem,
	porcentagem - Centralizar elementos: - Dá para usar margin-top,
	left,
	right,
	bottom negativos - z-index: - ou + - position: relative; - Permite que seja definido top,
	left,
	right e bottom para um elemento (as distâncias deles em cada uma dessas direções) . - Permite a sobreposição de elementos,
	mas outros elementos ainda "respeitam" o espaço do elemento relative. - Posicionamento o elemento: as distâncias são definidas de acordo com a posição dos outros elementos próximos. - Colocar um elemento com position absolute dentro de outro com position relative: - Ele irá se posicionar dentro do elemento com position relative,
	e não de acordo com o viewport. - position: fixed; - Mesmas características do position absolute,
	podendo ser definido top,
	bottom,
	left,
	right. - Diferença do absolute: o elemento sempre irá ocupar a posição especificada,
	mesmo com a rolagem da página. - Usado em botões de voltar ao topo,
	ou botões de contato por whatsapp,
	por exemplo. - position: sticky; - Usado para elementos com overflow. - O elemento com position sticky vai ficar aparecendo na rolagem da página,
	até que passe para o próximo elemento sticky. - Media queries e breakpoints: - Media-queries: estrutura do CSS que permite aplicar determinados estilos de acordo com condições setadas. - Permite que sejam sobrescritos estilos no CSS. - Pode ser usada para definir como um conteúdo será apresentado,
	a depender do tamanho da tela do usuário. - São definidos breakpoints a partir dos quais a regra do CSS a ser seguida vai mudar. - Como definir: @media (max-width: 320px) { .formulario { width: 500px; } } - Podem também ser usados operadores lógicos: not,
	and,
	only,
	e também pode ser usado o "or". Ex.: @media (min-width: 321px) and (max-width: 768px) { } - Mobile-first ou desktop-first: - Geralmente os sites são feitos para mobile,
	no CSS,
	sendo utilizadas as media-queries para que possa ser acessado via desktop. */

/* .test-1 {
	display: block;
	background-color: #bd5734;
	opacity: 0.5;
	box-sizing: border-box;
	width: 50rem;
	height: 30rem;
	margin: 0 auto 50px auto;
	padding: 80px;
	position: absolute;
	top: 510vh;
	left: 10rem;
	right: 10rem;
	bottom: 20rem;
	overflow: hidden;
	z-index: -1;
}

.test-2 {
	background-color: aqua;
	box-sizing: content-box;
	max-width: 500px;
	max-height: 200px;
	padding: 80px;
	margin: 50px auto;
	z-index: -2;
} */

/* @media (max-width: 768px) {
	.conteúdo-página {
		width: 100vw;
	}

	.formulario {
		width: 50vw;
	}
} */
