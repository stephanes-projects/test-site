* {
	margin: 0;
	padding: 0;
	box-sizing: border-box;
}

html {
	scroll-behavior: smooth;
	height: 100%;
	/* width: 100%; */
}

body {
	font-family: "Open Sans", serif;
	font-size: 100%;
	line-height: 100%;
	background-color: white;
	margin: 0;
	height: 100%;
	/* width: 100%; */
	display: flex;
	flex-direction: column;
	align-items: right;
}

.conteúdo-página {
	padding: 0rem 5rem;
	/* margin-bottom: 40px; */
	min-height: 100vh;
}

.logo {
	display: flex;
	height: 80px;
	padding-left: 20px;
}

#imagem-logo {
	height: 100%;
	width: 120px;
}

.header {
	display: flex;
	width: 100%;
	background-color: black;
	justify-content: space-around;
	align-items: center;
	padding-left: 20px;
	margin: 0;
}

#menu-nav {
	width: 100%;
	height: max-content;
}

#botoes-menu {
	list-style: none;
	display: flex;
	align-items: center;
	justify-content: space-evenly;
}

#menu li a {
	display: flex;
	height: 50px;
	cursor: pointer;
	padding: 10px 60px;
	text-transform: uppercase;
}

#menu li a:hover {
	/* text-decoration: underline solid white; */
	color: sandybrown;
	/* background-color: rgba(0, 0, 0, 0.2); */
}

.menu-button {
	display: flex;
	justify-content: right;
	align-items: center;
	padding-right: 0px;
}

#login-button {
	border-radius: 0.3rem;
	background-color: white;
	font-family: "Open Sans", serif;
	font-weight: bold;
	height: 40px;
	width: 100px;
}

#login-button:hover {
	border: 2px solid sandybrown;
	cursor: pointer;
}

#inicio {
	text-decoration: none;
	color: white;
	font-size: 1.5rem;
	font-weight: bold;
}

#cursos {
	text-decoration: none;
	color: white;
	font-size: 1.5rem;
	font-weight: bold;
}

#sobre {
	text-decoration: none;
	color: white;
	font-size: 1.5rem;
	font-weight: bold;
}

#fale-conosco {
	text-decoration: none;
	color: white;
	font-size: 1.5rem;
	font-weight: bold;
}

.banner {
	display: flex;
	justify-content: center;
	align-items: center;
	margin-top: 50px;
}

.banner h1 {
	position: absolute;
	color: sandybrown;
	font-weight: bold;
	font-size: 50px;
	font-family: "Franklin Gothic Medium", "Arial Narrow", Arial, sans-serif;
}

.banner img {
	opacity: 0.5;
}

h1,
h2 {
	line-height: 100%;
}

h1 {
	margin: 0;
	padding: 10px 0;
	font-family: "Open Sans", serif;
	color: sandybrown;
	font-weight: bold;
	font-size: 1.5rem;
	text-align: left;
}

#aplicação-tema {
	margin: 40px 0px 40px 0;
}

.lista {
	list-style: inside;
	color: black;
	padding: 10px 0px 10px 30px;
}

.lista a {
	text-decoration: none;
	color: black;
}

.lista a:hover {
	text-decoration: underline solid black;
}

#OLOP {
	margin: 40px 0px 40px 0;
}

#MLAT {
	margin: 40px 0px 40px 0;
}

#MLP {
	margin: 40px 0px 40px 0;
}

p,
li {
	font-size: 20px;
	line-height: 2;
	letter-spacing: 1px;
	text-align: justify;
	margin: 5px 0px 5px 0;
}

/* p + p,
header + p {
	text-indent: 1.5rem;
} */

.citação {
	text-align: left;
	margin-left: 0px;
}

#mapa-endereço {
	/* margin: 0 auto; */
	display: flex;
	justify-content: center;
	margin: 50px 0px 50px 20px;
}

iframe {
	border-radius: 1rem;
}

.table {
	border-collapse: collapse; /* Junta as bordas da tabela*/
	font-family: sans-serif;
	width: 800px;
	padding: 0;
	margin: 50px auto;
}

thead td,
tbody td,
table th {
	border: 1px solid #ccc;
	padding: 5px;
	text-align: center;
}

table caption {
	caption-side: bottom;
	font-size: 14px;
	text-align: left;
	font-style: italic;
	margin: 10px 0;
}

tfoot td,
table th {
	background-color: #ddd;
	font-weight: bold;
	text-align: center;
}

tfoot {
	font-style: italic;
}

.table {
	/* max-width: 100%;
	overflow: auto; */
}

#footer {
	background-color: black;
	list-style: none;
	gap: 0rem;
	padding-right: 1rem;
	display: flex;
	justify-content: right;
	flex-direction: column;
	/* display: flex;
	justify-content: right;
	flex-direction: column;
	margin: 0;
	width: 100%; */
	/* bottom: 0; */
}
#footer li a {
	display: block;
	font-size: 1rem;
	text-decoration: none;
	color: white;
	font-weight: bold;
	cursor: pointer;
	text-align: right;
}
/* COmo resolver o posicionamento do footer??*/

#footer li a:hover {
	color: sandybrown;
	/* text-decoration: underline solid white; */
	background-color: rgba(0, 0, 0, 0.2);
}

#titulo-form {
	display: flex;
	background-color: rgba(244, 165, 96, 0.712);
	border: 2px solid brown;
	height: 150px;
	margin: 0 auto;
	align-items: center;
	justify-content: center;
}

form h1 {
	font-size: 20px;
	color: black;
	text-decoration: double;
	font-weight: bold;
}

form p {
	line-height: 30px;
	font-size: 20px;
	margin: 0;
}

label {
	cursor: pointer;
	display: block;
	margin: 10px 0px;
	font-weight: bold;
	width: max-content;
	font-size: 18px;

	/* border: 1px solid black; */
}

input,
select,
textarea {
	display: block;
	margin: 5px 0px;
	border: 0.5px solid black;
	transition: all 300ms ease-in-out;
}

input:focus:not(.IELTS-input),
select:focus,
textarea:focus {
	/* border: 2px solid blue; por que não aplica? */
	background-color: rgb(194, 194, 194);
	outline: none;
	border: 0.5px solid blue;
}

.div-botoes-finais {
	display: flex;
	gap: 5px;
}

.botao-final {
	border: 1px solid brown;
	border-radius: 15%;
	padding: 8px;
}

.botao-final:hover {
	background-color: rgba(0, 0, 0, 0.2);
}

.formulario {
	background-color: rgba(244, 164, 96, 0.5);
	max-width: 500px;
	margin: 50px auto;
	padding: 20px;
	border: 2px solid brown;
}

.IELTS {
	display: flex;
	gap: 10px;
	margin: 0;
	width: max-content;
}

.IELTS-input {
	border-radius: 50%;
	background-color: white;
	appearance: none;
	width: 15px;
	height: 15px;
}

.IELTS-input:checked {
	border-radius: 50%;
	border: 3px solid blue;
	/* background-color: white; */
}

/* .IELTS-input:focus {
	background-color: white;
	border: 3px solid blue;
} */

/* .espelho-ielts1:not(.IELTS-input-sim:checked) {
	background-color: black;
} */

.menu-login,
.menu-registre-se {
	display: flex;
	height: 80px;
	padding-left: 20px;
	background-color: black;
	width: 100%;
}

.login,
.registre-se {
	background-color: rgba(0, 0, 0, 0.2);
	width: 50%;
	margin: 0 auto;
}

.titulo-login,
.titulo-registre-se {
	font-size: 40px;
	text-align: center;
	font-weight: bold;
	padding-top: 20px;
}

.link:link {
	color: blue;
}

.link:visited {
	color: purple;
}

.item::after {
	content: " - ";
}

a:hover:not(.link, .link-footer, .botoes-menu-sup)::after {
	content: " * ";
	color: red;
}

#footer li a:hover::before {
	content: " -> ";
}

.introdução p::first-letter {
	font-size: 50px;
	color: sandybrown;
	font-weight: bold;
}

p + p {
	text-indent: 50px;
}

/* 
- Seletores básicos CSS:

	- Seletor de descendentes:

		- Pode ser selecionada um elemento específico que pertence a determinada classe:
			- Ex.:	h1.menu-login {} - Nesse caso, apenas o elemento h1 da aclasse "menu-login" será selecionado.
				HTML:
				<body>
					<div class="menu">
						<h1 class="menu-login">Faça login!</h1>
						<p class="menu-login">Não é cadastrado?Cadastre-se agora!</p>
					</div>
 			- Nesse caso, apenas o elemento h1 da aclasse "menu-login" será selecionado.

		- Herança de estilos em DIVs:
			- A configuração padrão do navegador determina que div's filhas herdam a cor da div pai.
				- color: inherit;
				- Isso pode ser alterado no CSS, basta definir o estilo color: initial;
			- Os filhos herdam
		
		.menus.menu-login {}
			- Irá selecionar elementos que tenham essas duas classes, concomitantement, "menus" e "menu-login"

		.menus .menu-login {}
			- Irá selecionar elementos da classe "menu-login" que sejam filhas do elemento de classe "menu".
		
		- Child selector:
			- Seletor direto de filhos específicos de um elemento. 
			- Usado para selecionar apenas alguns dos filhos, e não todos.
			Ex.:
			HTML:
			<div class="lista-1">
		
				<div class="item">
					ITEM 1
					<div class="explicacao">Explicacao</div>
				</div>

			<div class="item">
				ITEM 2
				<div class="explicacao">Explicacao</div>
				</div>
			</div>

			CSS:
			div {
			color: initial;
			}

			.lista-1 > .item {
			color: red;
			}

			- Nesse caso, apenas os elementos de classe "item" ficarão vermelhos.

	- Seletores de irmãos:
			- Adjacent sibling combinator:
				.introdução h1+p {}
				- Seleciona todos os <p> irmãos que são filhos de h1
			
			- General sibling selector:
				.introdução h1~p {}
				- Seleciona todos os elementos irmãos que vem depois de h1
			

	- Seletor de atributos:
			[src] {}
			- Pode ser selecionado apenas o atributo, e aí todos os atributos do HTML serão selecionados.
			
			[src=".test-site/images/imagem.png"] {}
			- Pode ser selecionado o atributo e o seu valor. Nesse caso, o estilo só será aplicado caso o valor seja aquele em específico.
				- Interessante quando se utiliza js para manipular a página.

			[meu-atributo~="valor1"] {}
			- Seleciona o atributo apenas para um valor específico que ele tenha, no caso de o atributo ter vários valores possíveis.
				HTML
				<h1 meu-atributo="valor1 valor2 valor3">

			[meu-atributo|="valor1"] {}
			- Seleciona apenas o primeiro atributo e que seja seguidos de -

			[meu-atributo^="foto"] {}
			- Seleciona atributos quando o valor começa com "foto"

			[meu-atributo$="foto"] {}
			- Seleciona atributos quando o valor termina com "foto".

			[meu-atributo*="as"] {}
			- Seleciona atributos quando o valor contém "as"


	- Pseudoclasses: permitem a estilização de um elemento de acordo com o seu estado.
		
		- Transition: all 10ms ease-in
				- Define como ocorrerão as transcições entre estados.

		- Pseudoclasses para links:
			seletor:link {}
				- Aplica um estilo, caso o link ainda não tenha sido aberto.

			seletor:visited {}
				- Aplica um estilo, caso o link já tenha sido aberto.
			
			seletor:active {}
				- Aplica um estilo apenas durante a seleção do link

		
		seletor:hover {}
		- Aplica estilo ao passar o mouse sobre o elemento.

		seletor:focus {}
		- Aplica estilo quando o elemento estiver selecionado
		- Bastante utilizado para inputs.
		- Inputs já vem com um outline padrão preto.
		
		seletor:first-child

		seletor:last-child

		seletor:required

		seletor:not()
		- Seleciona um elemento, exceto algum outro, que pode ser referenciado pela classe, ID ou tag.
		Ex.:
		input:hover:not(.inputName) {
			background-color: red;


		seletor:nth-child(even / odd / 5 / 3n / 3n+5)
		- Seleciona um ou vários elementos irmãos específicos.
		- Even: par
		- Odd: ímpar
		- índice específico: selecionar pelo numeral do índice do irmão.
		- 3n/4n: seleciona de 3 em 3/4 em 4
		- 3n+5: seleciona de 3 em 3 a partir do 5º elemento
		
	
	- Pseudoelementos: permite a estilização de uma parte específica de um elemnto.
		- seletor::before
			- Pseudoelemento irá aparecer dentro do elemento selecionado, antes do seu conteúdo.
		- seletor::after
			- Pseudoelemento irá aparecer dentro do elemento selecionado, depois do seu conteúdo.
		- seletor::first-line
		- seletor::first-letter
		- seletor::placeholder



- Especificidade no CSS:
	- ID, classes, atributos e pseudo-classes, elementos e pseudo-elementos
	- Sempre a regra com a maior especificidade é aplicada, indepentemente da ordem em que foi escrita no css.
	- Para regras de mesma especificidade, será aplicada a que foi escrita por último.
	- Quantos mais seletores forem sendo adicionados, maior a especificidade, no geral. 
		- Tem que ser verificado o resultado, para ver qual regra será aplicada.
	- Atributo style é a que regra que tem maior especificidade (utilizada no próprio html).
	- !important: se for escrita na frente da regra do css, ela será aplicada, independentemente da especificidade.


OBS.: pode ser definida regra para seletor que tenha #ID & .classe ao mesmo tempo. Nesse caso, a especificidade é maior que apenas o ID.
Ex.:
	html
		...
		<section class="introdução"> 
		<h1 class="introdução" id="titulo"> Como começa: </h1>
		
		</section>

		#titulo {
			background-color: red;
		}

		#titulo.introdução {
			background-color: blue;
		}
	- Nesse caso, o background blue será aplicado, pois a especificidade é (1,1,0) -> 110
	

- Herança de propriedades:
	- Algumas propriedades são passadas de pai para filho.
	- Color, font-family, font-size, font-style... há uma lista das principais propriedades herdadas.
	- Para desativar a herança e configurações padrões do navegador: definir a propriedade com o valor "initial".
		Ex.: font-size: initial



- Propriedades box-model:
	- Elementos com display block podem ter altura e largura definidas, enquanto que
	elementos com display inline, não pegam altura e largura.
	Ex.: tag <p> tem o display padrão inline, enquanto <div> tem display block.
	- Width
		- Max-width
		- Min-width
	- Height
		- Max-height
		- Min-width
	- Overflow: propriedade que define o que acontecerá quando o content exceder a altura ou largura da box em que está contido.
	- 
		


*/

div {
	color: initial;
}

.lista-1 > .item {
	color: red;
}
